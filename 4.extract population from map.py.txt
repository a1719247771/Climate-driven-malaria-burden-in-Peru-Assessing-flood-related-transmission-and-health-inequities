import geopandas as gpd
import rasterio
from rasterstats import zonal_stats
import pandas as pd
import os
from pathlib import Path


def extract_population_by_municipality(shapefile_path, raster_paths, output_path=None):
    """
    使用地理边界从栅格数据中提取每个市镇的人口统计数据

    参数:
    shapefile_path: str - 秘鲁三级行政区shapefile路径
    raster_paths: dict - SSP人口预测TIFF文件路径字典
    output_path: str - 输出CSV文件路径（可选）

    返回:
    pandas.DataFrame - 包含人口统计数据的数据框
    """

    print("正在读取地理边界数据...")
    # 读取shapefile
    try:
        gdf = gpd.read_file(shapefile_path)
        print(f"成功读取 {len(gdf)} 个行政区域")
        print(f"坐标参考系统: {gdf.crs}")
    except Exception as e:
        print(f"读取shapefile失败: {e}")
        return None

    # 显示shapefile的列信息
    print(f"行政区域字段: {list(gdf.columns)}")

    # 创建结果数据框，包含行政区域信息
    result_df = gdf.copy()

    # 处理每个SSP情景的TIFF文件
    for scenario_name, raster_path in raster_paths.items():
        print(f"\n正在处理 {scenario_name}...")

        # 检查文件是否存在
        if not os.path.exists(raster_path):
            print(f"警告: 文件不存在 - {raster_path}")
            result_df[f'{scenario_name}_population'] = None
            continue

        try:
            # 检查栅格数据信息
            with rasterio.open(raster_path) as src:
                print(f"  栅格尺寸: {src.width} x {src.height}")
                print(f"  坐标参考系统: {src.crs}")
                print(f"  数据类型: {src.dtypes[0]}")

            # 确保坐标参考系统一致
            if gdf.crs != src.crs:
                print(f"  正在重投影边界数据从 {gdf.crs} 到 {src.crs}")
                gdf_reprojected = gdf.to_crs(src.crs)
            else:
                gdf_reprojected = gdf

            # 使用zonal_stats计算每个行政区域的人口统计
            print(f"  正在计算区域统计...")
            stats = zonal_stats(
                gdf_reprojected,
                raster_path,
                stats=['sum', 'mean', 'count'],
                nodata=src.nodata
            )

            # 提取总人口数（sum）
            population_values = [stat['sum'] if stat['sum'] is not None else 0 for stat in stats]

            # 添加到结果数据框
            result_df[f'{scenario_name}_population'] = population_values
            result_df[f'{scenario_name}_mean_density'] = [stat['mean'] if stat['mean'] is not None else 0 for stat in
                                                          stats]
            result_df[f'{scenario_name}_pixel_count'] = [stat['count'] if stat['count'] is not None else 0 for stat in
                                                         stats]

            print(f"  完成! 总人口: {sum(population_values):,.0f}")

        except Exception as e:
            print(f"  处理 {scenario_name} 时出错: {e}")
            result_df[f'{scenario_name}_population'] = None

    # 保存结果
    if output_path:
        try:
            # 确保输出目录存在
            output_dir = os.path.dirname(output_path)
            os.makedirs(output_dir, exist_ok=True)

            # 只保留必要的列用于输出
            output_cols = [col for col in result_df.columns if not col == 'geometry']
            output_df = result_df[output_cols]

            output_df.to_csv(output_path, index=False, encoding='utf-8-sig')
            print(f"\n结果已保存到: {output_path}")

            # 同时保存为地理空间文件 (Shapefile格式)
            shapefile_output = output_path.replace('.csv', '.shp')
            result_df.to_file(shapefile_output, encoding='utf-8')
            print(f"地理空间数据已保存到: {shapefile_output}")

        except Exception as e:
            print(f"保存文件时出错: {e}")

    return result_df


def main():
    """主函数"""

    # 定义文件路径
    shapefile_path = "D:/秘鲁/秘鲁/地图三级行政区/per_admbnda_adm3_ign_20200714.shp"

    raster_paths = {
        "SSP1_2030": "F:/ssp/SPP1/SPP1/SSP1_2030.tif",
        "SSP1_2050": "F:/ssp/SPP1/SPP1/SSP1_2050.tif",
        "SSP2_2030": "F:/ssp/SSP2/SPP2/SSP2_2030.tif",
        "SSP2_2050": "F:/ssp/SSP2/SPP2/SSP2_2050.tif",
        "SSP3_2030": "F:/ssp/SSP3/SPP3/SSP3_2030.tif",
        "SSP3_2050": "F:/ssp/SSP3/SPP3/SSP3_2050.tif"
    }

    # 输出文件夹路径
    output_dir = r"C:\Users\a1230\Desktop\pop"

    # 确保输出文件夹存在
    os.makedirs(output_dir, exist_ok=True)

    # 输出文件路径
    output_path = os.path.join(output_dir, "秘鲁市镇人口统计_SSP情景.csv")

    print("开始提取秘鲁市镇人口数据...")
    print("=" * 50)
    print(f"输出文件将保存到: {output_dir}")
    print("=" * 50)

    # 执行数据提取
    result = extract_population_by_municipality(
        shapefile_path=shapefile_path,
        raster_paths=raster_paths,
        output_path=output_path
    )

    if result is not None:
        print("\n" + "=" * 50)
        print("数据提取完成!")

        # 显示统计摘要
        print(f"\n处理的行政区域数量: {len(result)}")

        # 显示人口数据摘要
        population_cols = [col for col in result.columns if 'population' in col]
        if population_cols:
            print("\n各情景人口统计摘要:")
            for col in population_cols:
                if result[col].notna().any():
                    total_pop = result[col].sum()
                    print(f"  {col}: {total_pop:,.0f} 人")

        # 显示前5行数据预览
        if len(result) > 0:
            print("\n数据预览 (前5行):")
            display_cols = ['ADM3_ES'] if 'ADM3_ES' in result.columns else result.columns[:3]
            display_cols.extend([col for col in population_cols[:3]])
            print(result[display_cols].head().to_string(index=False))

    else:
        print("数据提取失败!")


# 额外的实用函数
def create_summary_report(csv_path):
    """
    创建人口数据摘要报告
    """
    try:
        df = pd.read_csv(csv_path, encoding='utf-8-sig')

        print("秘鲁市镇人口数据摘要报告")
        print("=" * 40)

        # 人口增长分析
        scenarios = ['SSP1', 'SSP2', 'SSP3']
        years = ['2030', '2050']

        for scenario in scenarios:
            print(f"\n{scenario} 情景分析:")
            for year in years:
                col_name = f"{scenario}_{year}_population"
                if col_name in df.columns:
                    total = df[col_name].sum()
                    print(f"  {year}年总人口: {total:,.0f}")

            # 计算增长率
            if f"{scenario}_2030_population" in df.columns and f"{scenario}_2050_population" in df.columns:
                pop_2030 = df[f"{scenario}_2030_population"].sum()
                pop_2050 = df[f"{scenario}_2050_population"].sum()
                if pop_2030 > 0:
                    growth_rate = ((pop_2050 - pop_2030) / pop_2030) * 100
                    print(f"  2030-2050增长率: {growth_rate:.1f}%")

        return df

    except Exception as e:
        print(f"生成摘要报告时出错: {e}")
        return None


def create_excel_summary(csv_path, output_dir):
    """
    创建Excel格式的综合分析报告
    """
    try:
        import openpyxl
        from openpyxl.styles import Font, PatternFill, Alignment

        df = pd.read_csv(csv_path, encoding='utf-8-sig')
        excel_path = os.path.join(output_dir, "秘鲁市镇人口分析报告.xlsx")

        with pd.ExcelWriter(excel_path, engine='openpyxl') as writer:
            # 原始数据表
            df.to_excel(writer, sheet_name='原始数据', index=False)

            # 情景对比表
            scenarios = ['SSP1', 'SSP2', 'SSP3']
            years = ['2030', '2050']

            summary_data = []
            for scenario in scenarios:
                for year in years:
                    col_name = f"{scenario}_{year}_population"
                    if col_name in df.columns:
                        total_pop = df[col_name].sum()
                        summary_data.append({
                            '情景': scenario,
                            '年份': year,
                            '总人口': total_pop,
                            '市镇数量': len(df[df[col_name] > 0])
                        })

            summary_df = pd.DataFrame(summary_data)
            summary_df.to_excel(writer, sheet_name='情景对比', index=False)

            # 人口增长率分析
            growth_data = []
            for scenario in scenarios:
                col_2030 = f"{scenario}_2030_population"
                col_2050 = f"{scenario}_2050_population"
                if col_2030 in df.columns and col_2050 in df.columns:
                    pop_2030 = df[col_2030].sum()
                    pop_2050 = df[col_2050].sum()
                    if pop_2030 > 0:
                        growth_rate = ((pop_2050 - pop_2030) / pop_2030) * 100
                        growth_data.append({
                            '情景': scenario,
                            '2030年人口': pop_2030,
                            '2050年人口': pop_2050,
                            '增长率(%)': round(growth_rate, 2)
                        })

            growth_df = pd.DataFrame(growth_data)
            growth_df.to_excel(writer, sheet_name='增长率分析', index=False)

        print(f"Excel分析报告已保存到: {excel_path}")
        return excel_path

    except ImportError:
        print("提示: 安装openpyxl库可生成Excel报告 (pip install openpyxl)")
        return None
    except Exception as e:
        print(f"创建Excel报告时出错: {e}")
        return None


if __name__ == "__main__":
    # 运行主程序
    main()

    # 生成摘要报告（如果CSV文件存在）
    output_dir = r"C:\Users\a1230\Desktop\pop"
    csv_file = os.path.join(output_dir, "秘鲁市镇人口统计_SSP情景.csv")
    if os.path.exists(csv_file):
        print("\n" + "=" * 50)
        create_summary_report(csv_file)

        # 创建Excel综合分析报告
        print("\n正在创建Excel分析报告...")
        create_excel_summary(csv_file, output_dir)

        print(f"\n所有文件已保存到: {output_dir}")
        print("生成的文件包括:")
        print("- 秘鲁市镇人口统计_SSP情景.csv (主要数据)")
        print("- 秘鲁市镇人口统计_SSP情景.shp (地理空间数据)")
        print("- 秘鲁市镇人口_SSP1_情景.csv (SSP1情景)")
        print("- 秘鲁市镇人口_SSP2_情景.csv (SSP2情景)")
        print("- 秘鲁市镇人口_SSP3_情景.csv (SSP3情景)")
        print("- 秘鲁市镇人口分析报告.xlsx (Excel综合报告)")